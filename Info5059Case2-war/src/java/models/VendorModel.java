package models;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.annotation.Resource;
import javax.enterprise.context.RequestScoped;
import javax.inject.Named;
import javax.sql.DataSource;
/**
 *
 * @author GCouto A model back bean for a Vendor Entity
 */
@Named(value = "vendorModel")
@RequestScoped

public class VendorModel implements Serializable {
    public VendorModel() {
    }
        //resource already defined in glassfish
        @Resource(lookup="jdbc/Info5059db")
        DataSource ds;
        
        //Function: dbGetVendorById
        //Takes: String - vendor ID
        //Outputs: ArrayList<String> with vendor information from the DB
        public ArrayList<String> dbGetVendorById(String vendorID) throws SQLException {
            ArrayList<String> retArray = new ArrayList<>();
            String sql = "SELECT ADDRESS1,CITY,PROVINCE,POSTALCODE,PHONE,"
                    + "VENDORTYPE,NAME,EMAIL FROM Vendors WHERE vendorno =  " + vendorID;
            PreparedStatement stmt;
            ResultSet rs;
            Connection con = null;
            
            try {
                con = ds.getConnection();
                stmt = con.prepareStatement(sql);
                rs = stmt.executeQuery();
                ResultSetMetaData metadata = rs.getMetaData();
                int numberOfColumns = metadata.getColumnCount();
                while( rs.next() )
                 {
                    int i = 1;
                    while(i <= numberOfColumns) {
                        retArray.add(rs.getString(i++));
                    }
                    
                 }
                stmt.close();
                rs.close();
                con.close();
                
            } catch (SQLException se) {
                //Handle errors from JDBC
                System.out.println("SQL issue" + se.getMessage());                
            } catch(Exception e) {
                //Handle other errors
                System.out.println("Other issue " + e.getMessage());
            } finally {
                //finally block used to close resources
                try {
                    if(con != null){
                        con.close();
                    }
                } catch (SQLException se) {
                    System.out.println("SQL issue on close " + se.getMessage());
                }//end finally try
            }//end finally
            return retArray;
        }
        
        //Function: dbAddVendor
        //Takes: A whole bunch of vendor information
        //Outputs: Int - VendorId key autogenerated by the stmt.
        public int dbAddVendor(String address, String city, String province, String postalCode,
                String phone, String vendorType, String name, String email) throws SQLException {
            String sql = "INSERT INTO Vendors (Address1,City,Province,PostalCode,Phone,VendorType,Name,Email) VALUES (?,?,?,?,?,?,?,?)";
//            String sql = "INSERT INTO Vendors (Address1,City,Province,PostalCode," +
//                    "Phone,VendorType,Name,Email" +
//                    "VALUES ( 22 Shady Lane ,London,Ontario,N5X3N4,5198584770,Trusted,Gustavo,gustavocoutoeom@gmail.com)";

            Connection con = null;
            int vendorno = -1;
            try {
                PreparedStatement stmt;
                con = ds.getConnection();
                stmt = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
                stmt.setString(1, address);
                stmt.setString(2, city);
                stmt.setString(3, province);
                stmt.setString(4, postalCode);
                stmt.setString(5, phone);
                stmt.setString(6, vendorType);
                stmt.setString(7, name);
                stmt.setString(8, email);
                stmt.executeUpdate();
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                rs.next();
                vendorno = rs.getInt(1);
                }

                stmt.close();
                con.close();
                
            } catch (SQLException se) {
                //Handle errors from JDBC
                System.out.println("SQL issue" + se.getMessage());                
            } catch(Exception e) {
                //Handle other errors
                System.out.println("Other issue " + e.getMessage());
            } finally {
                //finally block used to close resources
                try {
                    if(con != null){
                        con.close();
                    }
                } catch (SQLException se) {
                    System.out.println("SQL issue on close " + se.getMessage());
                }//end finally try
            }//end finally
            return vendorno;
        }
//Function: getVendorNos()
//Takes: nothing
//Outputs: ArrayList<Integer> containing all of the vendorids on the DB
public ArrayList<Integer> getVendorNos()
{
        ArrayList<Integer> vendornos = new ArrayList<>();
        try
        {
            String sql = "SELECT vendorno FROM Vendors";
            Connection con = ds.getConnection();
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            while( rs.next() )
            {
                vendornos.add( rs.getInt(1) );
            }
            stmt.close();
            rs.close();
            con.close();
        }    
        catch( Exception e )
        {
            System.out.println( "Exception caught in getVendorNos: " + e.getMessage() );
        }
        finally
        {
            return vendornos;
        }
}

}
